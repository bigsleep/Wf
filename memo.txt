--------------------------------------------------------------------------------
20150203 fromWaiRequest

例外投げるようにしたので、Effにするところで拾う?

--------------------------------------------------------------------------------
20150203 レスポンス

response404
response403
とかがあってもいいかも

jsonApiとかJsonResponseとかでくるんでToWaiResponseの方で処理したほうがいい気がする

Responseをそのままthrowできるようにしてるけどnewtypeとかしたほうがいいかも

JsonApiのファイルごといらない気がする

------------------------------------------------------------------------------
20150101 セッション

読み込んでから何も書き込まなかった時は保存する必要ない。
変更されたフラグか何か見るか

------------------------------------------------------------------------------
20141231 共通処理

前処理
セッションからユーザーを取ってくるとか
csrfトークンチェックとか
httpsチェックとか

後処理
レスポンスヘッダに何か足すとか


------------------------------------------------------------------------------
20141230 csrfなど

cookieが自動で送られるのでログインしているときに不正な操作が可能になってしまうことがある。

formにhiddenでtokenを入れる

tokenはsessionIdをそのまま使うこともある。

テンプレートエンジンで埋め込む必要がある?

csrf tokenを取得するAPIを作ってjavascriptで呼べばいい気もする。

angularとかを見る

set-cookieでtokenを送って、これをcookieの他 (X-XSRF-TOKENなど) にHeaderに付与する
javascriptから操作する必要があるためHttpOnlyを解除する必要がある

script要素などから呼び出されないようにする。新しいブラウザなどでは対策されているかもしれない
X-Requested-With, Orginのヘッダをサーバー側チェック
配列ではなくオブジェクトにする?


bodyに入れるよりヘッダに入れたほうがサーバーの処理としては楽そう。
formなどではヘッダはいじれない

- レスポンスにトークン付与、set-cookie
- リクエストのトークンチェック、post, put, deleteのとき
  セッションのトークンと引数で渡したトークンを比較
  リクエストのトークンを取得するところは書くのが面倒そう

-----------------------------------------------------------------------------
20141230 cookie secure 属性

httpsで作ったクッキーをhttpでは送らない
全部httpsならset-cookieをサーバーから送るときにsecure属性をつけるだけ

http, https混在
httpsでログインしてsessionId発行する場合はsecureにできない
sessionIdとは別のトークンをsecure属性のついたトークンとして発行する。set-cookieヘッダで送る
トークンはsessionに保存する。httpsの場合にcookieヘッダで送られてきたトークンとsessionのトークンを比較する

Sessionの対応?

set-cookieの属性の付け方を設定できるようにする
httpsならsecure属性をつける
expires属性をつけるかどうか
http-onlyをつける
domain, path あまり使わなそう

-----------------------------------------------------------------------------
20141220 extensible-effects

reflection without remorseのFreeモナドを使った実装になった。

VE, adminなどがなくなった。
freeMapを使う。

Liftを使った時にwhereに制約付きの型を書かないといけなくなっていてだるい。
MemberUのインスタンスが解決できないと言われる

aaa :: (SetMember Lift (Lift IO) r) => Eff r String
aaa = bbb
    where
    bbb :: (SetMember Lift (Lift IO) r) => Eff r String
    bbb = lift getLine

---------------------------------------------------------------------------
20141216 memo

request -> m response
から
request -> (response -> m respond) -> m respond
は作れる

request -> (response -> m respond) -> m respond
から
request -> m response
は作れなそう

ルーティングの部分で普通のWai.Applicationも使える方がいいので
色々変える必要があるかも

Wai.Applicationを渡すroutesもほしい

request -> M response と Wai.Application のルーターを作れば良さそう


type Application = Request -> (Response -> IO Received) -> IO Received

type App request response r =  request -> Eff r response

toApplication
    :: (SetMember Lift (Lift IO) r, FromWaiResponse response, ToWaiRequest request)
    => (forall a. Eff r a -> IO a) -> App -> Application
toApplication run app req cont = cont . toWaiResponse . run . app . lift . fromWaiRequest $ req


------------------------------------------------------------------------
20141122 memo

effの別の実装もある。
どれつかえばいいかよくわからない。型クラスにするとか
とりあえず保留で今のままでもいい

エクスポートまとめたり
引数多すぎて使いにくいのを修正したりする

json以外のシリアライズ方法。後でもいい


モジュールをある程度分ける

wf
wf-session
wf-session-kvs
wf-kvs-stm
wf-kvs-redis
wf-authenticate
wf-persistent


authenticateでセッション使う場合もまとめるほうがいいかも。
セッションすでにある場合はキーは必要ないので。Maybe keyとかにする?

reflectionとReaderとあると複雑すぎる感がある

--------------------------------------------------------------------------
20140908 sample

hackageのapiを使う何か

依存関係のグラフとか?

簡単なもの。バージョンは無視で最新のだけ見て依存関係のツリーを作る。
svgを出力する。dotコマンド

パッケージの情報とかsvgとかは適当にキャッシュするか一日一回更新とか
stmかredisなどにおく

- パッケージ情報取得 http://hackage.haskell.org/packages/
- cabalファイル http://hackage.haskell/package/:package/:package.cabal
- 依存関係のツリーを作る
- svgを描画
- stmなどに保存

更新に1時間ぐらいかかりそう
全パッケージのcabalファイル取得するのが遅い
更新頻度遅くすればまあいいか
メモリも結構使いそう。100MBとか?
svgにするとどうなるかやってみる

indexページを作る

---------------------------------------------------------------------
20140907 heroku

herokuにデプロイするのに必要そうなこと

- 設定を書き換える
jsonファイルとかの一部を環境変数で置き換える
起動時のシェルスクリプトとかでやる?
ポート、oauthのシークレットなど

- git
herokuに上げるときに別にgithubに上がってる必要はなさそう
ソースは上げる必要ない。実行ファイルとかだけでいい
別プロジェクト?

herokuに一応デプロイできた


--------------------------------------------------------------------
20140830 STM

ソフトウェアトランザクショナルメモリー
http://research.microsoft.com/en-us/um/people/simonpj/papers/stm/index.htm

DBとトランザクションとか、強い例外安全のような感じ?

STMモナド
TVar
newTVar, readTVar, writeTVar
atomically

Spockでセッションストアに使ってた.
redisとか使うのに比べて環境用意したりは楽そう。

STMモナドの中で計算する。atomicallyでIOにする
失敗すると例外?

成功か失敗で中途半端な状態にならない。

失敗はどう検知される? CASのような感じ?

例えばHashMapへの挿入と読み出しが同時にあった時は失敗する?

読み出しと、書き込みとかを並列で適当に実行して様子を見てみるか


--------------------------------------------------------------------
20140826 distributed-process

メッセージパッシングとか分散プロセスとかのライブラリらしい。
並行並列の本に載ってる。

- Control.Distributed.Static
プロセスで共有される静的な値?

- Closure
他のプロセスで走らせられる関数のようなもの?
プロセスに関数を直接渡すのが難しいのでこういう感じになってるのか?

- spawn
erlangにもある。プロセス起動?

- terminate
プロセス終了?
die, kill, exitとか似たようなのが色々

- say
ログ用関数

- send
メッセージ送る

- expect
メッセージを待つ。受け取る

- expectTimeout
タイムアウト付きでexpect

- Chan
チャンネル? よくわからん
メッセージ送るのは送って終わりだけど、
メッセージ受け取るのは、メッセージが来るのを待つ必要があるから
チャンネルが必要なのか?

- KVSをdistributed-processにすると
セッションクリアとか、再起動とか簡単にできそう
管理者用のAPIで実行させる?
管理者をどう設定するか。IP制限とか、管理者テーブルにいるユーザーとか?


---------------------------------------------------------------
20140822 response

やっぱwaiのrequest, responseのままのほうがやりやすいかもしれない。

---------------------------------------------------------------
20140822 respond

Accept:とかでフォーマット指定された時に、分岐する場合とかに使う?

-------------------------------------------------------------
20140821 Content-Length

WaiのresponseBuilderやresponseLBSではContent-Lengthがヘッダーにないときは
Transfer-Encoding: chunked
が挿入されるらしい。Warpではということ?
Content-Lengthはいれたほうがいいのか?

https://hackage.haskell.org/package/warp-3.0.1.1/docs/Network-Wai-Handler-Warp.html

-------------------------------------------------------------
20140821 session

SessionStateはrunのところでstateを引数で引き回せば消せるような気がする

------------------------------------------------------------
20140820 間違ったところメモ

どういうテスト書けばなくせるか

- codeとstate逆にした
- token uriとauth uriを間違った
- 時間をリクエスト開始に取得するところを、サーバー開始したときに取得してた

---------------------------------------------
20140818 api

パーサーとレンダラーを指定してapiを作る関数をたす

パラメーターを簡単にとってくる関数

githubのoauth2も試す

seleniumのテストとか?面倒

scottyにあるhtmlとかjsonの関数をたす


-------------------------------------------------------------------
20140803 wai

wai request -> request
response -> wai response

型クラスで書けばいいか

FromWaiRequest
ToWaiResponse

Wf.Network.Wai


APIルーティング用の関数たす
パラメーター取得の関数たす


----------------------------------------------------------------
20140803 authenticate

mが型パラメータに入ってしまうとうまく書けないっぽい。

oauth2でユーザー情報取得に必要なのは
url, userinfo_endpoint
access token付与の方法 access token type があればいい? とりあえずはBearerしか使わないか
レスポンスパース方法 ByteString -> Maybe User


----------------------------------------------------------------
20140802 OAuth2

認証サーバーで連携を許可する部分はテストで書くの難しそう。
動作確認ようのサーバーを書いてみる。

1. 認証用urlにリダイレクト stateを発行してセッションに保存
    redirectToAuthenticationServer
2. 認証コードからアクセストークンを取得 state確認
    getAccessToken
3. アクセストークンからユーザー情報を取得
    getUserDetail, getTokenInfo

redirectApp

oauth2CallbackApp

loginApp
----------------------------------------------------------------
20140728 jsonApiの部分のテスト

jsonを受け取ってjsonを返すApiをいくつか用意する。簡単なのでいい
テストケースとしてリクエストと期待されるレスポンスの組を用意する
shouldBeとかでテスト


----------------------------------------------------------------
20140724 routingのテスト?

ApiDefinitionの配列を受け取って、
ルート定義を残してImplementの部分をデバッグ用に置き換える。
routesにくわせる
テストケースを書いてルーティング確認
自動で検証して呼ばれないところを探すとかはできそうか

----------------------------------------------------------------
20140717 やること

テスト追加
例追加

jsonApi

DB?

セッションのexportまとめる
Web.Session
kvsのexportまとめる
Database.Kvs


----------------------------------------------------------------
20140717 heroku

使い方調べる。
無料でも少し使えるらしい。
無料だとDBはPostgresだけ。容量も小さい
Redisを提供するサービスもあるらしい

----------------------------------------------------------------
20140707 設定ファイル

デプロイ環境でコンパイルするとは限らないので
設定ファイル読み込んで来てその設定使うのは必要そう

実行時はプロジェクトのパスに移動してくる前提で
相対パスで書いとけばいいか

実際走らせるときは起動スクリプトか何かを書くか

---------------------------------------------------------
20140706 todo

- セッション保存と取得を型色々使えるようにする -> DONE

- リクエストパラメーターとか、クエリパラメーターとかurlとして渡されるパラメーター
  の取得方法を簡単にする
  リーダーとかReflection使うか

- oauth2の実際動かす例

------------------------------------------------------------
20140626 authenticate

方法によってAPIの数も違ったりする
インターフェースはどうするか

リクエスト取得する方法と、レスポンス返す方法のインターフェースを用意して
色々な認証シーケンスがカバーできればいいか

authenticate :: (Member (Authenticate auth user) r) => auth -> Eff r user

oauth2
リクエストにcodeがあればとか、リクエストのパスによって
認証サーバーへのリダイレクトか
アクセストークン取得してユーザー情報取得
redirect_uriがリクエストパスと一致していてcodeがあればアクセストークン取りに行っていいか

Waiを直接使わないほうがいいか
HttpRequest, HttpResponse

リクエスト、レスポンスのインターフェースを全部作るの面倒臭い


認証するインターフェースと
認証を移譲してどこかに飛ばすインターフェースにする?

authenticate
authenticationTransfer

oauth2はこの二つあればいけるか?

ユーザーの情報
認証サーバー: google, facebook, github, ...
ユーザーID: 文字列?, user identification
e-mail: 無い場合もある?

JWT bearer token?

認証サーバーごとに普通APIは別で
どれ使ってるかはわかるのでユーザーIDとe-mailとかだけでいいか

------------------------------------------------------------
20140626 config?

設定の扱いをどうするか

Reflection? よくわからない

Readerか引数でいい気がする

ファイルか何かで読み込んで
runの関数に引数で渡す

シリアライズ方法? JSONでいいか

-----------------------------------------------------------
20140622 ライブラリと実行ファイルで分ける

NAME/Web/...
NAME/Control/Eff
NAME/Control/Eff/Run
NAME/Data/...

Application

ライブラリの名前?
Wf

--------------------------------------------------------
20140622 api

data WApi i o m = WApi
    {
        wapiRouteDefinition :: RouteDefinition,
        wapiRequestParser :: ByteString -> Maybe i,
        wapiResponseRenderer :: o -> ByteString,
        wapiImplement :: i -> m o,
        wapiAuthRequired :: Bool,
        wapiIsSecure :: Bool
    }

routes :: [Wapi i o m] -> m Response

レスポンスのヘッダ?
Content-Type
Set-Cookie


----------------------------------------------------------
20140620 oauth2 TODO

sessionクッキーのrenderを書く
state生成はoauth2の方に書く

----------------------------------------------------------------
20140614 kvs

expireAt utc のような感じのをたす

-------------------------------------------------------------------
20140612 Response

とりあえずState Responseを使う

addHeader
setHeader
setBody

などScottyとかも見る

------------------------------------------------------------------
20140611 時間

UTCTimeはピコ秒精度らしい
とりあえずは秒までしか使わなそう

getCurrentTime
diffTime
addSeconds
formatTime, parseTime
ぐらいがあればいいか

ログに吐くときはZonedTimeのほうがよさそう
LocalTimeだと場所の情報がないのでそれだけだとUTCに変換できない?

------------------------------------------------------------------
20140608 ログイン

セッションにログインユーザーセットと
ログインユーザー取得を追加

ログアウト?

同じユーザーで複数セッション存在する可能性もある。

ユーザーのログアウト日時を保存してセッションがこれより先に作られていたら
セッションを破棄してloginにリダイレクトする
セッションの作成日時も持っておく必要があるか

普通はそのセッションだけ破棄すればいいのかも

----------------------------------------------------------------
20140608 Kvs

ttlを変えずに値だけ変えるときは?

ttlで残り寿命を取得してセットしなおせば一応はよい

modifyのようなのを使う?

他必要そうなインターフェースは?

redis, memcachedあたりを見る

-----------------------------------------------------------------
20140602

oauth2用の機能?

client id, client secret
authorization uri
redirect uri
get access token
get refresh token


1. 認証用urlにリダイレクト stateを発行してセッションに保存
    redirectToAuthenticationServer
2. 認証コードからアクセストークンを取得 state確認
    getAccessToken
3. アクセストークンからユーザー情報を取得
    getUserDetail, getTokenInfo

4. refreshAccessToken

Authenticateのバックエンドにoauth2を使う

ログインしてユーザー情報取得, セッション発行

失敗したらどこかに飛ばす

自前で書くより何かライブラリを使うか

-----------------------------------------------------------------
20140602

方針決まらないところもインターフェースだけあれば他のところはかける
かけるところから書く

セッションのキーのとり方が決まらない -> GetSessionIdのインターフェースだけ作る

Jsonのリクエストを
{"request":{...}, "ssid":"aaaaaaaaaaaaa"}
みたいな感じにすればいいか

コンテンツタイプを見てjsonかクエリパラメーターか判断すればいいのか

読むときはCookieから読んでCSRFチェックは別にする?

wai.sessionにgenSessionIdがあった

PHPをまねる

Web.Cookie.SetCookieを設定につかう

IPとかを保存して、読み込み時にチェックする

セッション開始、セッション読み込み、セッション内容書き換え、セッション破棄
OpenSession ReadSession ModifySession DestroySession

Modifyは読み込んでセットし直す?
ttlがどれくらいあるか調べる方法が必要か

----------------------------------------------------------------
20140602 Api

iとoの型は外にでてこない感じにする?

GetRequestを2回呼んだら、2回パースが走る?

セッションIDとかをどういれるか


Api i o a

type JsonApi a = forall i o. (FromJSON i, ToJSON o) => Api i o a

--------------------------------------------------------------
20140601 エラーのレンダリング

レスポンスを返したいときは、SomeException Responseとかにすればいいか

必要あればキャストしてエラー処理、レスポンス作成

ほかはデフォルトのエラーレスポンスとか


-----------------------------------------------------------------
20140601 View

Api i o

Request -> Maybe i
o -> Maybe Response

Viewの分離?

iとoの型を決める

Requestからiと
oからResponseの関数を分けておけばいい?

JSONだけ使う前提とかでもいいか

-----------------------------------------------------------------
20140527 Logger

data Logger logger a

logger型引数をつけてLoggerを複数付けられるようにする
Application.Eff.Loggerにloggerの型を具体的に書く
log関数などの引数も部分適用したものを定義する
他のLoggerはApplication.Eff.FluentdLoggerとか

----------------------------------------------------------
20140527 認証

認証が必要なAPIと不要なAPIがある
デフォルトの挙動を決めて書き換えられるような感じか
ログを必ず出力するとか
バリデーションはパースできてればだいたいokな気もする。場合によるか

data ApiSetting = ApiSetting
    { authRequired :: Bool
    , isSecure :: Bool
    , logVerbose :: Bool
    , requestValidator :: Request -> Bool
    , responseValidator :: Response -> Bool
    }

defaultApiSetting

data Api a = Api ApiSetting a


withAuthorizationとかを使う?

内部でユーザー情報使う場合は何も書かなくても認証必要になる
ユーザー情報は必要ないけど要求する場合に簡単にかければいいか


----------------------------------------------------------
20140525 やること

Routesのテスト -> DONE
Loggerを直す。ロガー複数ある場合もありえる -> DONE
IOの例外キャッチ? -> status500
クライアント -> DONE テスト?
JSON API
コントローラー?
warp
OAuth2でログイン


--------------------------------------------------------
20140522 セッションのエラーどうするか

何かエラー用の型を用意するか

エラーの型はインターフェースと一緒にかく?

エラーの型はアプリで共通のほうがいいのか
エラーも色々あるので共通にするのは難しそう
effならあまり気にすることなく色々使えるか

エラーの種類は?

Kvsに接続できなかった
Kvsのタイムアウト
セッション開始時にKvsに保存失敗した
生成したセッションが既に存在した -> 作りなおせばいい?
セッション読み込みで情報がなかった -> セッションタイムアウト?
セッション削除に失敗 -> リトライ? そもそもそのキーが存在しない?

エラーの原因は調査には必要。ログに残す
エラー後の処理の分岐には原因は関係なさそう。リトライする場合などは必要か
Kvsが不調 -> リトライする
Kvsにデータがない -> リトライ不要

エラー型で分岐することはあまりない
existentialなタイプでエラー何でも入れられる型を作ってExcを一つだけ使うとかでいいか
どうせTypeableにはする必要があるのでエラー型で分岐するときはキャストして使えばいい

----------------------------------------------------
20140518 Binary

SerializableはBinaryとかのほうがいいかも
Data.Binary

Strict.ByteStringじゃなくてLazy.ByteStringを使ったほうがいい?

------------------------------------------------------
20140518 設定

Configとか設定用ソースを用意する。
gitignore

-------------------------------------------------------
20140518 セッション

セッションIDをキーにしてユーザー情報などを保存

セッションIDは普通ヘッダにクッキーでつけるっぽい

- セッション開始
セッションIDを生成、Kvsにユーザー情報保存
ヘッダにSet-Cookieをつける

- セッションを読む
セッションIDを受け取って保存してある情報を読む
普通はリクエストのヘッダなどにセッションIDがある
セッション読めなければ403などを返す

- セッションを消す

セッションIDはsha1とかhmacSha1とかで作ればいいか
プレフィックスに適当な文字列とか時刻とか入れる
ssid20140518:0af98adf709a8f0af8d7fa70af78e087fad8f00

時刻はData.Timeのパッケージを使う
Reader LocalTimeとかで

-----------------------------------------------------
20140517 oauth2でログインするだけ
